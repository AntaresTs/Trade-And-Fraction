# Configuration file

forcefield {
    # Amount of RF per tick required for the forcefield to work
    I:fieldBaseConsumption=100

    # Duration of the base cooldown in ticks after the forcefield has been broken
    I:fieldBaseCooldown=300

    # Padding of the entity detection range (effective range is this + shield radius), may requires to be increased to detect VERY fast projectiles
    I:fieldEntityDetectionRange=25

    # Amount of RF per tick per forcefield shield upgrade
    I:fieldHealthConsumption=25

    # The HP increase per forcefield shield upgrade
    I:fieldHealthUpgradeEffect=50

    # The damage multiplier of flan's mod projectiles. 100 is the normal damage it would do to a player, 200 is double damage, etc.
    I:fieldImpactFlanMultiplier=100

    # The general multiplier of the damage equation (hitbox size ^ massExp * entity speed ^ speedExp * mult)
    I:fieldImpactMultiplier=100

    # The exponent of the projectile's mass (hitbox size) in the damage equation (200 -> ^2)
    I:fieldMassImpactExponent=200

    # Amount of RF per tick per forcefield range upgrade
    I:fieldRangeConsumption=50

    # Duration of the additional cooldown in ticks per block of radius. Standard radius is 16, the additional cooldown duraion is therefore 48 ticks, or 348 in total. Values below 5 are recommended.
    I:fieldRangeCooldown=3

    # The radius increase per forcefield range upgrade
    I:fieldRangeUpgradeEffect=16

    # The exponent of the projectile's speed in the damage equation (100 -> ^1)
    I:fieldSpeedImpactExponent=100

    # Whether or not the forcefield should use a special function to pull the damage value out of flan's mod projectiles. Utilizes the worst code and the shittiest programming techniques in the universe, but flan's bullets may not behave as expected if this option is turned off
    B:useFlanSpecialCase=true
}


general {
    # How difficult the crafting recipes are, from 0 - 2 (very easy to hard), values outside this range make most stuff uncraftable
    I:craftingDifficulty=0

    # Whether or not the radar and shield are free to use, i.e. do not require RF
    B:freeRadar=true
}


radar {
    # Whether or not the radar uses a comparator to output it's signal, will directly output otherwise
    B:comparatorOutput=false

    # Y height required for the radar to work
    I:radarAltitude=55

    # How high entities have to be above the radar to be detected
    I:radarBuffer=30

    # Amount of RF per tick required for the radar to work
    I:radarConsumption=50

    # Whether or not the radar makes frequent pinging sounds
    B:radarPing=true

    # Range of the radar, 50 will result in 100x100 block area covered
    I:radarRange=1000
}


